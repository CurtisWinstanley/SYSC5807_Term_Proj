
from Tim_sort import *
from allpairspy import AllPairs
import math
import random
import numpy


def test_tim_sort_solver():
    # Define test parameters for Tim sort. 
    large_array_sorted = [1, 2, 3, 4, 5, 10, 11, 22, 43, 65]
    medium_array_sorted = [1, 77, 89, 100, 201]
    small_array_sorted = [44, 49, 90]
    large_array_unsorted = [54, 33, 2, 4, 77, 77, 90, 103, 5, 21]
    medium_array_unsorted = [3, 56, 57, 8, 89]
    small_array_unsorted = [3, 2, 4]
    parameters = {
        "array": [large_array_sorted,
                  medium_array_sorted,
                  small_array_sorted,
                  large_array_unsorted,
                  medium_array_unsorted,
                  small_array_unsorted],
        "run_size": [-1, 0, 1, 5, 10, 100],
        "array_size_correct": [False, True]
    }

    # Generate pairwise (2-way) test cases --- UNCOMMENT to generate tests
    # pairwise_tests = list(AllPairs(parameters.values()))
    # print(pairwise_tests, len(pairwise_tests))


    # Test cases generated by AllPairsPy (36 in total)
    test_cases = [[[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], -1, False], [[1, 77, 89, 100, 201], 0, False], [[44, 49, 90], 1, False], 
                  [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], 5, False], [[3, 56, 57, 8, 89], 10, False], [[3, 2, 4], 100, False], 
                  [[3, 2, 4], 10, True], [[3, 56, 57, 8, 89], 5, True], [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], 1, True], [[44, 49, 90], 0, True], 
                  [[1, 77, 89, 100, 201], -1, True], [[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], 100, True], [[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], 10, True], 
                  [[1, 77, 89, 100, 201], 10, True], [[44, 49, 90], 10, True], [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], 10, True], 
                  [[3, 56, 57, 8, 89], 100, True], [[3, 2, 4], -1, True], [[3, 2, 4], 0, True], [[3, 56, 57, 8, 89], 0, True], 
                  [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], 0, True], [[44, 49, 90], -1, True], [[1, 77, 89, 100, 201], 100, True], 
                  [[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], 0, True], [[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], 5, True], [[1, 77, 89, 100, 201], 5, True], 
                  [[44, 49, 90], 5, True], [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], 100, True], [[3, 56, 57, 8, 89], -1, True], 
                  [[3, 2, 4], 5, True], [[3, 2, 4], 1, True], [[3, 56, 57, 8, 89], 1, True], [[54, 33, 2, 4, 77, 77, 90, 103, 5, 21], -1, True], 
                  [[44, 49, 90], 100, True], [[1, 77, 89, 100, 201], 1, True], [[1, 2, 3, 4, 5, 10, 11, 22, 43, 65], 1, True]]
    
    
    # Custom test cases
    random_128_array = numpy.random.randint(0, 101, size=128)
    test_cases.append([random_128_array, 32, True])
    
    
    
    array: list
    print("\nPairwise (2-Way) Testing Results:")
    for test_case in test_cases:
        array, run_size, array_size_correct = test_case
        temp_array = array.copy()
        print("Testing array: ", array, "and run size: ", run_size, "with correct array size? ", array_size_correct) 
        try:
            if array_size_correct: 
                tim_sorted_array = timSort(array, len(array), run_size)
            else:
                tim_sorted_array = timSort(array, int(len(array)*random.uniform(0, 1)), run_size)
                
                
            temp_array.sort() # Sort using pythons built in method.
            if numpy.array_equal(tim_sorted_array, temp_array):  # Correct way to compare NumPy arrays
                valid = True
            else:
                valid = False
            
            # Assert that validation is True (roots satisfy the equation)
            assert valid, f"Tim Sort algo failed with array: {array} and run size: {run_size}"
        except InvalidArrayLengthException:
            print("Caught exception: InvalidArrayLengthException")
            assert not array_size_correct

        except InvalidRunException:
            print("Caught exception: InvalidRunException")
            assert run_size <= 0

        except Exception as e:
            print("Unexpected exception occurred:", e)
            assert False, f"Unexpected error: {e}"
            





if __name__ == "__main__":
    test_tim_sort_solver()